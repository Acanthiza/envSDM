% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tune_sdm.R
\name{tune_sdm}
\alias{tune_sdm}
\title{Tune, and evaluate, species distribution models}
\usage{
tune_sdm(
  this_taxa = NULL,
  out_dir,
  algo = c("all", "maxnet", "bioclim", "envelope", "rf"),
  fc = "auto_feature",
  limit_p = FALSE,
  rm = seq(1, 6, 0.5),
  trees = c(500, 1000, 2000),
  mtry = TRUE,
  nodesize = c(1, 2),
  keep_model = FALSE,
  best_run = FALSE,
  metrics_df = envSDM::sdm_metrics,
  use_metrics = c("auc_po", "CBI_rescale", "IMAE"),
  do_gc = TRUE,
  force_new = FALSE,
  save_to = out_dir,
  ...
)
}
\arguments{
\item{this_taxa}{Character. Name of taxa. Used to name outputs. If \code{NULL},
this will be \code{basename(dirname(out_dir))}.}

\item{out_dir}{Character. Name of directory into which results will be saved.}

\item{algo}{Character. Name of algorithm to use.}

\item{fc}{Character. Used to generate levels of \code{classes} argument to
\code{maxnet::maxnet()} that are tuned.}

\item{limit_p}{\code{TRUE}, \code{FALSE} or number of predictor variables above which
to limit the use of \code{p} in the classes argument used in \code{maxnet::maxnet()}.
Useful with many predictor variables when it becomes unwieldy to generate
interactions for all predictors.}

\item{rm}{Numeric. Used to generate levels of \code{regmult} argument to
\code{maxnet::maxnet()} that are tuned.}

\item{trees}{Used to generate the levels of \code{ntree} argument to
\code{randomForest::randomForest()} that are tuned. \code{TRUE} (tune with default
\code{trees}), \code{FALSE} (don't tune \code{trees}) or numeric (the \code{trees} values to tune
with).}

\item{mtry}{Used to generate the levels of \code{mtry} argument to
\code{randomForest::randomForest()} that are tuned. \code{TRUE} (tune with sensible guesses for
\code{mtry}), \code{FALSE} (only use default \code{randomForest::randomForest()} \code{mtry}) or
numeric (the \code{mtry} values to tune with).}

\item{nodesize}{Used to generate the levels of \code{nodesize} argument to
\code{randomForest::randomForest()} that are tuned. \code{TRUE} (tune with default
\code{nodesize}), \code{FALSE} (only use default \code{randomForest::randomForest()}
\code{nodesize}) or numeric (the \code{nodesize} values to tune with).}

\item{keep_model}{Logical. If \code{TRUE} the model results will be appended as a
list column in the returned tibble (as column \code{m})}

\item{best_run}{Logical. If \code{TRUE} this alters the behaviour of the
\code{tune_sdm()} by, well, not tuning. :). Sets all blocks to the same value so
no cross-validation.}

\item{metrics_df}{Dataframe. Defines which metrics to use when deciding on
'good' SDMs.}

\item{use_metrics}{Character. Vector of values in metrics_df$metric to use
when finding the 'best' model.}

\item{do_gc}{Logical. Run \code{base::rm(list = ls)} and \code{base::gc()} at end of
function? Useful when running SDMs for many, many taxa, especially if done in
parallel.}

\item{force_new}{Logical. If outputs already exist, should they be remade?}

\item{save_to}{Character. Name of path to save results. Defaults to out_dir
which works if not \code{best_run}. For a best run from \code{run_full_sdm()}, this
will default to \code{fs::path(out_dir, "best")}. Otherwise set as anything.}

\item{...}{Passed to \code{evaluate_sdm()}. e.g. thresholds for use in
\code{predicts::pa_evaluate()} (as \code{tr} argument, although if used, the values of
the \code{thresholds} element of the \code{pa_ModelEvaluation} object returned by
\code{predicts::pa_evaluate()} will be limited to the values in \code{tr}).}
}
\value{
Character path to output .rds file. \code{tune.rds} saved into \code{save_to}
directory. log written. \code{tune.rds} is a data frame but performs poorly, due
to list columns, if not imported as a tibble (e.g. via
\verb{rio::import("tune.rds", setclass = "tibble"))})
}
\description{
Tune, and evaluate, species distribution models
}
\examples{

  out_dir <- file.path(system.file(package = "envSDM"), "examples")

  data <- file.path(system.file(package = "predicts"), "ex") |>
    fs::dir_ls(regexp = "\\\\.csv$") |>
    tibble::enframe(name = NULL, value = "path") |>
    dplyr::mutate(taxa = gsub("\\\\.csv", "", basename(path))
                  , presence = purrr::map(path, rio::import, setclass = "tibble")
                  , presence = purrr::map(presence
                                          , \(x) x |>
                                            dplyr::filter(!is.na(lat)
                                                          , !is.na(lon)
                                                          )
                                          )
                  , out_dir = fs::path(out_dir, taxa)
                  )

  purrr::walk(data$out_dir
              , \(x) tune_sdm(out_dir = x)
              )

  # which tune args were best for each taxa using 'combo'?
  data \%>\%
    dplyr::mutate(eval_file = fs::path(out_dir, "evaluation.csv")
                  , eval = purrr::map(eval_file, rio::import, setclass = "tibble")
                  ) \%>\%
    tidyr::unnest(cols = c(eval)) \%>\%
    dplyr::filter(best) \%>\%
    dplyr::select(taxa, algo, tune_args, combo, auc_po, IMAE, CBI, max_spec_sens)

  # or best tune args choosing on just auc_po?
  data \%>\%
    dplyr::mutate(eval_file = fs::path(out_dir, "evaluation.csv")
                  , eval = purrr::map(eval_file, rio::import, setclass = "tibble")
                  ) \%>\%
    tidyr::unnest(cols = c(eval)) \%>\%
    dplyr::group_by(taxa) \%>\%
    dplyr::filter(auc_po == max(auc_po)) \%>\%
    dplyr::ungroup() \%>\%
    dplyr::select(taxa, algo, tune_args, combo, auc_po, IMAE, CBI, max_spec_sens)
}
