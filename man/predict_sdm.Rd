% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_sdm.R
\name{predict_sdm}
\alias{predict_sdm}
\title{Predict from SDM}
\usage{
predict_sdm(
  prep,
  full_run,
  out_dir,
  predictors = NULL,
  is_env_pred = TRUE,
  terra_options = NULL,
  doClamp = TRUE,
  apply_thresh = TRUE,
  force_new = FALSE,
  do_gc = FALSE,
  check_tifs = TRUE,
  ...
)
}
\arguments{
\item{prep}{Character or named list. If character, the path to an existing
\code{prep.rds}. Otherwise, the result of a call to \code{prep_sdm()} with return_val =
"object".}

\item{full_run}{Character or named list. If character, the path to an
existing \code{full_run.rds}. Otherwise, the result of a call to \code{run_full_sdm}()
with return_val = "object".}

\item{out_dir}{Character. Name of directory into which \code{.tif}s will be saved.
Will be created if it does not exist.}

\item{predictors}{Character. Vector of paths to predictor \code{.tif} files.}

\item{is_env_pred}{Logical. Does the naming of the directory and files in
\code{predictors} follow the pattern required by \code{envRaster::parse_env_tif()}?}

\item{terra_options}{Passed to \code{terra::terraOptions()}. e.g. list(memfrac =
0.6)}

\item{doClamp}{Passed to \code{terra::predict()} (which then passes as \code{...} to
\code{fun}). Possibly orphaned from older envSDM?}

\item{apply_thresh}{Logical. If \code{TRUE}, an output raster \code{thresh.tif} will be
created using the maximum of specificity + sensitivity. The threshold value
can be accessed within \code{tune.rds} as, say, \code{mod <- rio::import("tune.rds")}
and then \code{mod$e[[1]]@thresholds$max_spec_sens}}

\item{force_new}{Logical. If output files already exist, should they be
remade?}

\item{do_gc}{Logical. Run \code{base::rm(list = ls)} and \code{base::gc()} at end of
function? Useful to keep RAM use down when running SDMs for many, many taxa,
especially if done in parallel.}

\item{check_tifs}{Logical. Check if any output \code{.tif} files error on
\code{terra::rast()} and delete them if they do. Useful after a crash during
predict.}

\item{...}{Passed to \code{terra::predict()}. e.g. use for wopt = list(). The
argument \code{overwrite} is already set to \code{TRUE} so do not provide via \code{...} -
the \code{pred.tif} file will only be remade if \code{force_new} is \code{TRUE}.}
}
\value{
Named list of created .tif files, usually 'pred.tif' and
'thresh.tif'. Output .tif(s) and .log, written to \code{out_dir}.
}
\description{
The resulting \code{pred.tif} is masked to the boundary provided to the
\code{pred_limit} argument of prep_sdm; or generated in prep_sdm from the
\code{pred_limit}, \code{limit_buffer} and \code{pred_clip} arguments. A threshold raster
can also be saved (saved as 'thresh.tif') - see \code{apply_thresh} argument. In
both cases the resulting files will have the same extent, resolution and crs
as the predictors.
}
\examples{

  # setup -------
  out_dir <- file.path(system.file(package = "envSDM"), "examples")

  env_dat <- system.file("ex/bio.tif", package = "predicts")


  # data ------
  data <- fs::path(system.file(package = "envSDM"), "examples") |>
    fs::dir_ls(regexp = "prep\\\\.rds$"
               , recurse = TRUE
               ) |>
    tibble::enframe(name = NULL, value = "prep") |>
    dplyr::mutate(taxa = gsub("\\\\.rds", "", basename(dirname(prep)))
                  , tune = gsub("prep", "tune", prep)
                  , out_dir = fs::path(out_dir, taxa, "combo")
                  )

  # Best combo--------
  ## run full SDM --------
  purrr::pmap(list(data$prep
                    , data$tune
                    , data$out_dir
                    )
               , \(a, b, c) run_full_sdm(prep = a
                                         , tune = b
                                         , out_dir = c
                                         , use_metric = "combo"

                                         # passed to tune_sdm via dots
                                         , metrics_df = envSDM::sdm_metrics
                                         )
               )


  ## predict -------
  purrr::pwalk(list(data$prep
                    , data$out_dir
                    )
               , \(a, b) predict_sdm(prep = a
                                     , full_run = fs::path(b, "full_run.rds")
                                     , out_dir = b
                                     , predictors = env_dat
                                     , is_env_pred = FALSE
                                     , check_tifs = TRUE
                                     )
               )

  ## .pngs -------
  if(FALSE) {

    # not working for binary 'thresh' rasters (due to an issue with number of 'classes"?):
      # Error in if (any(na.omit(x) < min(breaks)) && show.warnings) warning("Values have found that are less than the lowest break",  :
      # missing value where TRUE/FALSE needed
    purrr::walk2(data$out_dir
                 , data$out_dir
                 , \(x, y) png_from_preds(pred_dir = x
                                          , tune_dir = y
                                          , trim = FALSE
                                          , recurse = 1
                                          )
                 )

  }

  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "pred.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  ### threshold ------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "thresh.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  # Best auc--------
  ## run full SDM --------
  data <- data \%>\%
    dplyr::mutate(out_dir = gsub("combo", "auc_po", out_dir))

  purrr::pmap(list(data$prep
                    , data$tune
                    , data$out_dir
                    )
               , \(a, b, c) run_full_sdm(prep = a
                                         , tune = b
                                         , out_dir = c
                                         , use_metric = "auc_po"

                                         # passed to tune_sdm via dots
                                         , metrics_df = envSDM::sdm_metrics
                                         )
              )

  ## predict -------
  purrr::pwalk(list(data$prep
                    , data$out_dir
                    )
               , \(a, b) predict_sdm(prep = a
                                     , full_run = fs::path(b, "full_run.rds")
                                     , out_dir = b
                                     , predictors = env_dat
                                     , is_env_pred = FALSE
                                     , limit_to_boundary = TRUE
                                     , check_tifs = TRUE
                                     )
               )


  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "pred.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  ### threshold ------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "thresh.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )




}
