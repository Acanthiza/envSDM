% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_sdm.R
\name{predict_sdm}
\alias{predict_sdm}
\title{Predict from  SDM}
\usage{
predict_sdm(
  this_taxa = NULL,
  in_dir,
  out_dir = NULL,
  predictors = NULL,
  is_env_pred = TRUE,
  terra_options = NULL,
  doClamp = TRUE,
  limit_to_mcp = TRUE,
  apply_thresh = TRUE,
  force_new = FALSE,
  do_gc = FALSE,
  check_tifs = TRUE,
  ...
)
}
\arguments{
\item{this_taxa}{Character. Name of taxa. Used to name outputs. If `NULL`,
this will be `basename(dirname(out_dir))`.}

\item{in_dir}{Character. Name of directory containing: `prep.rds` (created
with `envSDM::prep_sdm()`); and model to predict from (`tune.rds`, created
with `envSDM::tune_sdm()`). Note that any `tune.rds` can be used but only the
model in the first row will be used, thus more usually this `tune.rds` will
have been created directly by `envSDM::run_full_sdm()`}

\item{out_dir}{Character. Name of directory into which results will be saved.
Will be created if it does not exist.}

\item{predictors}{Character. Vector of paths to predictor `.tif` files.}

\item{is_env_pred}{Logical. Does the naming of the directory and files in
`predictors` follow the pattern required by `envRaster::parse_env_tif()`?}

\item{terra_options}{Passed to `terra::terraOptions()`. e.g. list(memfrac = 0.6)}

\item{doClamp}{Passed to `terra::predict()` (which then passes as `...` to
`fun`). Possibly orphaned from older envSDM?}

\item{limit_to_mcp}{Logical. If `predict_boundary` exists within `prep` and
`limit_to_mcp == TRUE`, an output raster (`mask.tif`) will be created within
`predict_boundary` using `terra::mask()`. Irrespective of `limit_to_mcp`,
`full.tif` is always created at the full extent of the predictors. Thus all
`mask.tif` files can be 'stacked' as they have the same extent. If needed,
limiting the predictions for a taxa to its predict boundary can then be done
via `terra::trim(mask.tif)`.}

\item{apply_thresh}{Logical. If `TRUE`, an output raster `thresh.tif` will be
created using the threshold `mod$e[[1]]@thresholds$max_spec_sens`}

\item{force_new}{Logical. If outputs already exist, should they be remade?}

\item{do_gc}{Logical. Run `base::rm(list = ls)` and `base::gc()` at end of
function? Useful to keep RAM use down when running SDMs for many, many taxa,
especially if done in parallel.}

\item{check_tifs}{Logical. Check if any output `.tif` files error on
`terra::rast()` and delete them if they do. Useful after a crash during
predict.}

\item{...}{Not used.}
}
\value{
`invisible(NULL)`. Output .tif, .log, and optional .png, written to
`out_dir`
}
\description{
Predict from  SDM
}
\examples{

  # setup -------
  in_dir <- file.path(system.file(package = "envSDM"), "examples")

  env_dat <- system.file("ex/bio.tif", package = "predicts")


  # data ------
  data <- file.path(system.file(package = "predicts"), "ex") |>
    fs::dir_ls(regexp = "\\\\.csv$") |>
    tibble::enframe(name = NULL, value = "path") |>
    dplyr::mutate(taxa = gsub("\\\\.csv", "", basename(path))
                  , presence = purrr::map(path, rio::import, setclass = "tibble")
                  , presence = purrr::map(presence
                                          , \(x) x |>
                                            dplyr::filter(!is.na(lat)
                                                          , !is.na(lon)
                                                          )
                                          )
                  , out_dir = fs::path(in_dir, taxa)
                  )

  # Best combo--------
  ## run full SDM --------
  purrr::pwalk(list(data$out_dir)
                 , \(a) run_full_sdm(out_dir = a
                                     , metrics_df = envSDM::sdm_metrics
                                     )
                 )


  ## predict -------
  purrr::pwalk(list(data$out_dir)
               , \(a) predict_sdm(in_dir = fs::path(a, "combo")
                                  , predictors = env_dat
                                  , is_env_pred = FALSE
                                  , limit_to_mcp = TRUE
                                  , check_tifs = TRUE
                                  )
               )

  ## .pngs -------
  purrr::walk2(data$out_dir
               , data$out_dir
               , \(x, y) png_from_preds(pred_dir = x
                                        , tune_dir = y
                                        , trim = FALSE
                                        , force_new = TRUE
                                        , recurse = 1
                                        )
               )

  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "combo", "mask.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  ### threshold ------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "combo", "thresh.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  # Best auc--------
  ## run full SDM --------
  purrr::pwalk(list(data$out_dir)
                 , \(a) run_full_sdm(out_dir = a
                                     , metrics_df = envSDM::sdm_metrics
                                     , metric = "auc_po"
                                     , save_to = fs::path(a, "auc_po")
                                     )
                 )


  ## predict -------
  purrr::pwalk(list(data$out_dir)
               , \(a) predict_sdm(in_dir = fs::path(a, "auc_po")
                                  , predictors = env_dat
                                  , is_env_pred = FALSE
                                  , limit_to_mcp = TRUE
                                  , check_tifs = TRUE
                                  )
               )


  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "auc_po", "mask.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  ### threshold ------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "auc_po", "thresh.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )




}
