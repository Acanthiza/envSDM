% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/png_from_preds.R
\name{png_from_preds}
\alias{png_from_preds}
\title{Generate .png (map) files for each prediction}
\usage{
png_from_preds(
  dir,
  trim = TRUE,
  force_new = FALSE,
  include_blocks = TRUE,
  do_gc = TRUE,
  ...
)
}
\arguments{
\item{dir}{Character. Name of directory containing predicted .tif(s) to
save as .png}

\item{trim}{Logical. Trim NA values from outside (using `terra::trim()`)}

\item{force_new}{Logical. If .png file already exists, recreate it?}

\item{include_blocks}{Logical. Make a .png (map) of the blocks?}

\item{do_gc}{Logical. Run `base::rm(list = ls)` and `base::gc()` at end of
function? Useful when running SDMs for many, many taxa, especially if done in
parallel.}

\item{...}{Passed to `fs::dir_ls()`}
}
\value{
`invisible(NULL)`. Writes .png files with the same file name as any
.tif files
}
\description{
Finds any .tif files in `dir` and writes them to .png files. Includes the
retrieval and addition to the map of: various SDM metrics; and the original
presence points.
}
\examples{

  # setup -------
  in_dir <- file.path(system.file(package = "envSDM"), "examples")

  env_dat <- system.file("ex/bio.tif", package = "predicts")


  # data ------
  data <- file.path(system.file(package = "predicts"), "ex") |>
    fs::dir_ls(regexp = "\\\\.csv$") |>
    tibble::enframe(name = NULL, value = "path") |>
    dplyr::mutate(taxa = gsub("\\\\.csv", "", basename(path))
                  , presence = purrr::map(path, rio::import, setclass = "tibble")
                  , presence = purrr::map(presence
                                          , \(x) x |>
                                            dplyr::filter(!is.na(lat)
                                                          , !is.na(lon)
                                                          )
                                          )
                  , out_dir = fs::path(in_dir, taxa)
                  )

  # Best combo--------
  ## run full SDM --------
  purrr::pwalk(list(data$out_dir)
                 , \(a) run_full_sdm(out_dir = a
                                     , metrics_df = envSDM::sdm_metrics
                                     )
                 )


  ## predict -------
  purrr::pwalk(list(data$out_dir)
               , \(a) predict_sdm(in_dir = fs::path(a, "combo")
                                  , predictors = env_dat
                                  , is_env_pred = FALSE
                                  , limit_to_mcp = TRUE
                                  , check_tifs = TRUE
                                  )
               )

  ## .pngs -------
  purrr::walk(data$out_dir
              , \(x) png_from_preds(x
                                    , recurse = 1
                                    , include_blocks = FALSE
                                    )
              )

  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "combo", "mask.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  ### threshold ------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "combo", "thresh.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  # Best auc--------
  ## run full SDM --------
  purrr::pwalk(list(data$out_dir)
                 , \(a) run_full_sdm(out_dir = a
                                     , metrics_df = envSDM::sdm_metrics
                                     , metric = "auc_po"
                                     , save_to = fs::path(a, "auc_po")
                                     )
                 )


  ## predict -------
  purrr::pwalk(list(data$out_dir)
               , \(a) predict_sdm(in_dir = fs::path(a, "auc_po")
                                  , predictors = env_dat
                                  , is_env_pred = FALSE
                                  , limit_to_mcp = TRUE
                                  , check_tifs = TRUE
                                  )
               )


  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "auc_po", "mask.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  ### threshold ------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "auc_po", "thresh.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )




}
