% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prep_sdm.R
\name{prep_sdm}
\alias{prep_sdm}
\title{Prepare for running an SDM}
\usage{
prep_sdm(
  this_taxa = NULL,
  out_dir,
  presence,
  pres_crs = 4326,
  pres_x = "long",
  pres_y = "lat",
  pred_limit = TRUE,
  limit_buffer = 0,
  pred_clip = NULL,
  predictors,
  is_env_pred = TRUE,
  cat_preds = NULL,
  num_bg = 10000,
  prop_abs = "abs",
  many_p_prop = 2,
  folds = 5,
  spatial_folds = TRUE,
  min_fold_n = 8,
  stretch_value = 10,
  min_dens = 0.1,
  dens_res = 1000,
  save_pngs = TRUE,
  remove_corr = TRUE,
  corr_thresh = 0.9,
  do_gc = FALSE,
  force_new = FALSE
)
}
\arguments{
\item{this_taxa}{Character. Name of taxa. Used to name outputs. If `NULL`,
this will be `basename(dirname(out_dir))`.}

\item{out_dir}{Character. Name of directory into which results will be saved.}

\item{presence}{Dataframe of presences. Needs columns called `lat` (latitude)
and `long` (longitude) both in decimal degrees.}

\item{pres_crs}{Anything that will return a legitimate crs when passed to the
crs attribute of st_transform or st_as_sf}

\item{pred_limit}{Logical. area of interest limits (i.e. MCP around points).
Can be `TRUE` (use points to generate a minimum convex polygon to use as a
limit), `FALSE` (do not limit) or path to existing sf to use.}

\item{limit_buffer}{Numeric. Apply this buffer to `pred_limit` (in metres).}

\item{pred_clip}{sf. Optional sf to clip the pred_limit back to (e.g. to
prevent prediction into ocean)}

\item{predictors}{Character. Vector of paths to predictor `.tif` files.}

\item{is_env_pred}{Logical. Does the naming of the directory and files in
`predictors` follow the pattern required by `envRaster::parse_env_tif()`?}

\item{cat_preds}{Character. Vector of predictor names that are character.}

\item{num_bg}{Numeric. How many background points?}

\item{prop_abs}{Character. Is `num_bg` a proportion (`prop`) of the number of
records in `presence` or an absolute (`abs`) number?}

\item{many_p_prop}{Numeric. Ensure the number of background points is at
least `many_p_prop * number of presences`. e.g. If there are more than 5000
presences and num_bg is set at `10000` and `many_p_prop` is `2`, then num_bg
will be increased to `many_p_prop * nrow(presences)`}

\item{folds}{Numeric. How many folds to use in cross validation? Will be
adjusted downwards if number of presences do not support `folds * min_fold_n`}

\item{spatial_folds}{Logical. Use spatial folds? Even if `TRUE`, can resort
to non-spatial cv if presences per fold do not meet `min_fold_n` or there are
not enough presences to support more than one fold.}

\item{min_fold_n}{Numeric. Sets both minimum number of presences, and,
by default, the minimum number of presences required for a model.}

\item{stretch_value}{Numeric. Stretch the density raster to this value.}

\item{min_dens}{Numeric. Usually a little above 0. Sets the minimum density
for background points. If zero, large areas of no background points can cause
trouble with model predictions into these areas.}

\item{dens_res}{`NULL` or numeric. Resolution (in metres) of density raster.
Set to `NULL` to use the same resolution as the predictors.}

\item{save_pngs}{Logical. Save out a .png of the density raster and spatial
blocks}

\item{remove_corr}{Logical. If TRUE, predictors with high correlation
_at presences_ are removed.}

\item{corr_thresh}{Numeric. Definition of 'high' correlation for `remove_corr`}

\item{do_gc}{Logical. Run `base::rm(list = ls)` and `base::gc()` at end of
function? Useful when running SDMs for many, many taxa, especially if done in
parallel.}

\item{force_new}{Logical. If outputs already exist, should they be remade?}

\item{use_ecdf}{Logical. If `TRUE` the density raster is converted via
`ras_ecdf <- ecdf(values(target_density)), target_density <- terra::app(target_density, fun = \(i) ras_ecdf(i))`.
Creates wider density bands.}
}
\value{
`invisible(NULL)`. `prep.rds` (a list) and log written to `out_dir`
}
\description{
The background sampling includes code based on a [stackoverflow post]() by
user [spacedman](https://stackoverflow.com/users/211116/spacedman).
}
\examples{

  out_dir <- file.path(system.file(package = "envSDM"), "examples")

  data <- file.path(system.file(package = "predicts"), "ex") |>
    fs::dir_ls(regexp = "\\\\.csv$") |>
    tibble::enframe(name = NULL, value = "path") |>
    dplyr::mutate(taxa = gsub("\\\\.csv", "", basename(path))
                  , presence = purrr::map(path, rio::import, setclass = "tibble")
                  , presence = purrr::map(presence
                                          , \(x) x |>
                                            dplyr::filter(!is.na(lat)
                                                          , !is.na(lon)
                                                          )
                                          )
                  , out_dir = fs::path(out_dir, taxa)
                  )

  env_dat <- system.file("ex/bio.tif", package = "predicts")

  purrr::pwalk(list(data$taxa
                    , data$out_dir
                    , data$presence
                    )
               , function(a, b, c) prep_sdm(this_taxa = a
                                            , out_dir = b
                                            , presence = c
                                            , pres_x = "lon"
                                            , pres_y = "lat"
                                            , predictors = env_dat
                                            , is_env_pred = FALSE
                                            , pred_limit = TRUE
                                            , limit_buffer = 10000
                                            , dens_res = 1000 # ignored as decimal degrees preds
                                            , use_ecdf = FALSE
                                            )
               )

  prep_ex <- rio::import(fs::path(data$out_dir[[2]], "prep.rds"))

  names(prep_ex)

  # Density raster
  land <- !is.na(terra::rast(env_dat)[[1]])
  dens_ras <- terra::rast(fs::path(data$out_dir[[2]], "density.tif")) * land \%>\%
    terra::trim()

  if(require("tmap")) {

    m <- tm_shape(land) +
      tm_raster() +
      tm_shape(dens_ras) +
      tm_raster(title = "Presence density"
                , drop.levels = TRUE
                ) +
      tm_legend(outside = TRUE) +
      tm_compass() +
      tm_scale_bar() +
      tm_layout(main.title = paste0("Prep for ",  prep_ex$inputs$this_taxa))

    m

    # Spatial blocks
    head(prep_ex$blocks)

    blocks <- prep_ex$blocks \%>\%
      dplyr::mutate(blocks = factor(block)) \%>\% # for map
      sf::st_as_sf(coords = c("x", "y")
                   , crs = sf::st_crs(terra::rast(env_dat[[1]]))
                   )

    presences <- blocks \%>\%
      dplyr::filter(pa == 1)

    m +
      tm_shape(blocks) +
        tm_dots(col = "block"
                , palette = "viridis"
                , title = "Blocks"
                ) +
      tm_shape(presences) +
        tm_dots(col = "red")

  }
}
