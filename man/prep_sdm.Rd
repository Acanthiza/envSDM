% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prep_sdm.R
\name{prep_sdm}
\alias{prep_sdm}
\title{Prepare for running an SDM}
\usage{
prep_sdm(
  this_taxa = NULL,
  out_dir = NULL,
  return_val = "path",
  presence,
  pres_crs = 4326,
  pres_x = "long",
  pres_y = "lat",
  pred_limit = TRUE,
  limit_buffer = 0,
  pred_clip = NULL,
  predictors,
  is_env_pred = TRUE,
  cat_preds = NULL,
  num_bg = 10000,
  prop_abs = "abs",
  many_p_prop = 2,
  folds = 5,
  spatial_folds = TRUE,
  min_fold_n = 8,
  stretch_value = 10,
  dens_res = 1000,
  save_pngs = FALSE,
  remove_corr = TRUE,
  corr_thresh = 0.9,
  do_gc = FALSE,
  force_new = FALSE
)
}
\arguments{
\item{this_taxa}{Character. Name of taxa. Only used to print some messages.
Ignored if NULL}

\item{out_dir}{FALSE or character. If FALSE the result of prep_sdm will be
saved to a temporary folder. If character, a file 'prep.rds' will be created
at the path defined by out_dir.}

\item{return_val}{Character: "object" or "path". Both return a named list. In
the case of "path" the named list is simply list(prep = out_dir). Will be set
to "object" if \code{out_dir} is FALSE.}

\item{presence}{Dataframe of presences with columns \code{pres_x} and \code{pres_y}.}

\item{pres_crs}{Anything that will return a legitimate crs when passed to the
crs attribute of \code{sf::st_transform()} or \code{sf::st_as_sf()}.}

\item{pres_x, pres_y}{Character. Name of the columns in \code{presence} that have
the x and y coordinates}

\item{pred_limit}{Limit the background points and predictions?
Can be \code{TRUE} (use points to generate a minimum convex polygon to use as a
limit), \code{FALSE} (the full extent of the predictors will be used) or path to
existing .parquet to use.}

\item{limit_buffer}{Numeric. Apply this buffer to \code{pred_limit}. Only used if
\code{pred_limit} is \code{TRUE}. Passed to the \code{dist} argument of \code{sf::st_buffer()}.}

\item{pred_clip}{sf. Optional sf to clip the pred_limit back to (e.g. to
prevent prediction into ocean). Ignored if pred_limit is not TRUE.}

\item{predictors}{Character. Vector of paths to predictor \code{.tif} files.}

\item{is_env_pred}{Logical. Does the naming of the directory and files in
\code{predictors} follow the pattern required by \code{envRaster::parse_env_tif()}?}

\item{cat_preds}{Character. Vector of predictor names that are character.}

\item{num_bg}{Numeric. How many background points?}

\item{prop_abs}{Character. Is \code{num_bg} a proportion (\code{prop}) of the number of
records in \code{presence} or an absolute (\code{abs}) number?}

\item{many_p_prop}{Numeric. Ensure the number of background points is at
least \verb{many_p_prop * number of presences}. e.g. If there are more than 5000
presences and num_bg is set at \code{10000} and \code{many_p_prop} is \code{2}, then num_bg
will be increased to \code{many_p_prop * nrow(presences)}}

\item{folds}{Numeric. How many folds to use in cross validation? Will be
adjusted downwards if number of presences do not support \code{folds * min_fold_n}}

\item{spatial_folds}{Logical. Use spatial folds? Even if \code{TRUE}, can resort
to non-spatial cv if presences per fold do not meet \code{min_fold_n} or there are
not enough presences to support more than one fold.}

\item{min_fold_n}{Numeric. Sets both minimum number of presences, and,
by default, the minimum number of presences required for a model.}

\item{stretch_value}{Numeric. Stretch the density raster to this value.}

\item{dens_res}{\code{NULL} or numeric. Resolution (in metres) of density raster.
Set to \code{NULL} to use the same resolution as the predictors.}

\item{save_pngs}{Logical. Save out a .png of the density raster and spatial
blocks}

\item{remove_corr}{Logical. If TRUE, predictors with high correlation are
removed.}

\item{corr_thresh}{Numeric. Definition of 'high' correlation for \code{remove_corr}}

\item{do_gc}{Logical. Run \code{base::rm(list = ls)} and \code{base::gc()} at end of
function? Useful when running SDMs for many, many taxa, especially if done in
parallel.}

\item{force_new}{Logical. If outputs already exist, should they be remade?}
}
\value{
If \code{return_val} is "object" a named list. If \code{return_val} is "path"
a named list \code{list(prep = out_dir)}. If \code{out_dir} is a valid path, the 'full
result' (irrespective of \code{return_val}) is also saved to
\code{fs::path(out_dir, "prep.rds")}. The 'full result' is a named list with
elements:
\itemize{
\item log:
\itemize{
\item a log of (rough) timings and other information from the process
}
\item abandoned:
\itemize{
\item Logical indicating if the sdm was abandoned. If abandoned is TRUE, some
list elements may not be present
}
\item presence_ras:
\itemize{
\item tibble with two columns ('x' and 'y') representing unique cell
centroids on the predictors at presences supplied in argument \code{presence}
}
\item predict_boundary:
\itemize{
\item sf used to limit the background points and used by \code{predict_sdm()} to
generate the 'mask'ed output
}
\item bg_points:
\itemize{
\item sf of cell centroids representing unique cell centroids for background
points
}
\item blocks
\itemize{
\item data.frame with columns:
\itemize{
\item \code{pa}: presence (1) or absence/background (0)
\item \code{x} and \code{y}: cell centroids for each presence and absence
\item \code{block}: the spatial block to which the row belongs
\item a column with values for each of \code{predictors} at \code{x} and \code{y}
}
}
\item spatial_folds_used:
\itemize{
\item logical indicating if spatial folds were used. This may differ from
the \code{spatial_folds} argument provided to \code{prep_sdm()} if an attempt to
use spatial folds failed to meet desired \code{folds} and \code{min_fold_n}
}
\item correlated:
\itemize{
\item list with elements as per \code{envModel::make_env_corr()}, or, if
\code{remove_corr} is \code{FALSE}, a list with elements \code{remove_env} which is
empty, and \code{env_var}, containing the names of all predictors.
}
}
}
\description{
The background sampling includes code based on a
\href{https://gis.stackexchange.com/}{Geographic Information Systems stack exchange}
\href{https://gis.stackexchange.com/a/224347}{answer}
by user \href{https://gis.stackexchange.com/users/865/spacedman}{Spacedman}.
}
\examples{

  out_dir <- file.path(system.file(package = "envSDM"), "examples")

  data <- file.path(system.file(package = "predicts"), "ex") |>
    fs::dir_ls(regexp = "\\\\.csv$") |>
    tibble::enframe(name = NULL, value = "path") |>
    dplyr::mutate(taxa = gsub("\\\\.csv", "", basename(path))
                  , presence = purrr::map(path, rio::import, setclass = "tibble")
                  , presence = purrr::map(presence
                                          , \(x) x |>
                                            dplyr::filter(!is.na(lat)
                                                          , !is.na(lon)
                                                          )
                                          )
                  , taxa_dir = fs::path(out_dir, taxa)
                  , out_mcp = fs::path(taxa_dir, "mcp.parquet")
                  )

  env_dat <- system.file("ex/bio.tif", package = "predicts")


  # mcps --------

  # make a clip boundary so mcps stay terrestrial
  clip <- terra::as.polygons(terra::rast(env_dat)[[1]] > -Inf) |>
    sf::st_as_sf()

  purrr::pwalk(list(data$presence
                   , data$out_mcp
                   )
              , \(x, y) make_mcp(x, y, pres_x = "lon"
                                 , clip = clip
                                 )
              )


  # prep -----------
  # use the just created mcps (this allows using, say, a different spatial reliability threshold for the mcps)

  purrr::pwalk(list(data$taxa
                    , data$taxa_dir
                    , data$presence
                    , data$out_mcp
                    )
               , function(a, b, c, d) prep_sdm(this_taxa = a
                                               , out_dir = b
                                               , presence = c
                                               , pres_x = "lon"
                                               , pres_y = "lat"
                                               , predictors = env_dat
                                               , is_env_pred = FALSE
                                               , pred_limit = d
                                               , limit_buffer = 10000
                                               , dens_res = 1000 # ignored as decimal degrees preds
                                               )
               )

  # example of 'prep'
  prep <- rio::import(fs::path(data$taxa_dir[[2]], "prep.rds"))

  names(prep)

  # Density raster
  dens_ras <- terra::rast(fs::path(data$taxa_dir[[2]], "density.tif")) \%>\%
    terra::mask(clip) \%>\%
    terra::classify(matrix(c(0, NA), ncol = 2))

  if(require("tmap")) {

    m <-
      tm_shape(clip) +
      tm_borders() +
      tm_shape(dens_ras) +
      tm_raster(title = "Background point density"
                , breaks = c(0, 2, 4, 6, 8, 10)
                , drop.levels = TRUE
                , colorNA = NULL
                ) +
      tm_legend(outside = TRUE) +
      tm_compass() +
      tm_scale_bar() +
      tm_layout(main.title = paste0("Background point density for ",  prep$inputs$this_taxa))

    m

    presences <- prep$blocks \%>\%
      dplyr::filter(pa == 1) \%>\%
      sf::st_as_sf(coords = c("x", "y")
                   , crs = 4326
                   )

    m +
      tm_shape(presences) +
        tm_dots(col = "blue")

  }

  # Background points
  if(require("tmap")) {

    blocks <- prep$blocks \%>\%
      dplyr::mutate(blocks = factor(block)) \%>\% # for map
      sf::st_as_sf(coords = c("x", "y")
                   , crs = sf::st_crs(terra::rast(env_dat[[1]]))
                   )


    tm_shape(clip) +
      tm_borders() +
      tm_shape(blocks) +
      tm_dots(title = "Background points\n coloured by block"
              , col = "block"
              ) +
      tm_legend(outside = TRUE) +
      tm_compass() +
      tm_scale_bar() +
      tm_layout(main.title = paste0("Background points for ",  prep$this_taxa))


  }
}
